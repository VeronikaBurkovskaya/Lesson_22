{
	"info": {
		"_postman_id": "6a962811-ca6f-4a41-b280-4bb4df0402f3",
		"name": "HW_18",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27837079",
		"_collection_link": "https://www.postman.com/haugspori/workspace/queck/collection/27837079-6a962811-ca6f-4a41-b280-4bb4df0402f3?action=share&creator=27837079&source=collection_link"
	},
	"item": [
		{
			"name": "Sign in user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",1333333333333333333333333
							"});"
						],
						"type": "text/javascript"
					}
				}
			],

						}
					}
				},
				"url": {
					"raw": "https://{{my_url}}/auth/signin",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],qweeeeeeeeeeeeeeeeee
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{

							"pm.test(\"Check data in response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.carBrandId).to.eql(3);\r",
							"    pm.expect(jsonData.data.brand).to.eql(\"Ford\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"carBrandId\": 3,\r\n    \"carModelId\": 13,\r\n    \"mileage\": 666\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{my_url}}/cars",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update car",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check data in mileage\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.mileage).to.eql(2500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": {{car_id}},\r\n  \"carModelId\": 13,\r\n  \"mileage\": 2500\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{my_url}}/cars/{{car_id}}",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],
					"path": [
						"cars",
						"{{car_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add expense",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"expense_id\", jsonData.data.id);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check data in response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.mileage).to.eql(671);\r",
							"    pm.expect(jsonData.data.liters).to.eql(11);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carId\": {{car_id}},\r\n  \"reportedAt\": \"{{tmp_current_date}}\",\r\n  \"mileage\": 671,\r\n  \"liters\": 11,\r\n  \"totalCost\": 11,\r\n  \"forceMileage\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{my_url}}/expenses",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],
					"path": [
						"expenses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update expenses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.reportedAt).to.eql(\"2023-06-22\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carId\": {{car_id}},\r\n  \"reportedAt\": \"{{tmp_current_date}}\",\r\n  \"mileage\": 675,\r\n  \"liters\": 11,\r\n  \"totalCost\": 11,\r\n  \"forceMileage\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{my_url}}/expenses/{{expense_id}}",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],
					"path": [
						"expenses",
						"{{expense_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete expenses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{my_url}}/expenses/{{expense_id}}",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],
					"path": [
						"expenses",
						"{{expense_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get expenses - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Expense not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{my_url}}/expenses/{{expense_id}}",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],
					"path": [
						"expenses",
						"{{expense_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete car",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://{{my_url}}/cars/{{car_id}}",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],
					"path": [
						"cars",
						"{{car_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get car 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Car not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{my_url}}/cars/{{car_id}}",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],
					"path": [
						"cars",
						"{{car_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User log out",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{my_url}}/auth/logout",
					"protocol": "https",
					"host": [
						"{{my_url}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var moment= require ('moment');",
					"",
					"pm.collectionVariables.set('tmp_current_date', moment(). format((\"YYYY-MM-DD\")));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "my_url",
			"value": "qauto2.forstudy.space/api",
			"type": "string"
		},
		{
			"key": "tmp_current_date",
			"value": ""
		},
		{
			"key": "car_id",
			"value": ""
		},
		{
			"key": "expense_id",
			"value": "",
			"type": "string"
		}
	]
}